if ((Get-WmiObject win32_operatingsystem).osarchitecture -notlike "64*") {
    Write-Error 'This script is for 64-bit OSs only' -ErrorAction Stop
}

$ErrorActionPreference = "Stop"

function Rename-OneDriveFolder {
    <#
    .SYNOPSIS
        Rename OneDrive folder

    .PARAMETER NewOneDriveLeaf
        The new OneDrive folder name. If not provided, it will be generated by removing spaces and normalizing the current name.
    #>

    [CmdletBinding()]
    param (
        [Parameter(Mandatory = $false)][string]$NewOneDriveLeaf
    )

    # Retrieve current OneDrive path from env
    $OldOneDrivePath = $Env:OneDrive
    $OneDriveParent = Split-Path -Path $OldOneDrivePath -Parent
    $OldOneDriveLeaf = Split-Path -Path $OldOneDrivePath -Leaf
    if (-Not ($NewOneDriveLeaf)) {
        $NewOneDriveLeaf = $OldOneDriveLeaf.Replace(' ', '').Normalize([Text.NormalizationForm]::FormD) -Replace '\p{M}', ''
    }
    $NewOneDrivePath = Join-Path -Path $OneDriveParent -ChildPath $NewOneDriveLeaf
    $UserSid = ([System.Security.Principal.WindowsIdentity]::GetCurrent()).User.Value
    $OneDriveKnownGuid = '{04271989-C4D2-5D4D-4577-A4D66AFE5597}'

    # Retrieve User Object ID from the registry
    try {
        $UserObjectId = (Get-ItemProperty -Path 'HKCU:\Software\Microsoft\OneDrive\Accounts\Business1' -Name 'OneAuthAccountId').OneAuthAccountId
        Write-Output "User Object ID retrieved: $UserObjectId"
    } catch {
        Throw "Failed to retrieve User Object ID: $_"
    }

    # Stop OneDrive process
    try {
        Stop-Process -Name 'OneDrive' -ErrorAction Stop
        Write-Output "OneDrive process stopped."
    } catch {
        Throw "Failed to stop OneDrive process: $_"
    }

    # Rename the OneDrive directory
    try {
        Rename-Item -Path $OldOneDrivePath -NewName $NewOneDriveLeaf -ErrorAction Stop
        Write-Output "OneDrive directory renamed to: $NewOneDriveLeaf"
    } catch {
        Throw "Failed to rename OneDrive directory: $_"
    }

    # Update registry entries
    Set-ItemProperty -Path "HKCU:\Software\Classes\CLSID\$OneDriveKnownGuid"  '(default)' -Value $NewOneDriveLeaf
    Set-ItemProperty -Path "HKCU:\Software\Classes\CLSID\$OneDriveKnownGuid\Instance\InitPropertyBag\" -Name 'TargetFolderPath' -Value $NewOneDrivePath

    Set-ItemProperty -Path "HKCU:\Software\Classes\WOW6432Node\CLSID\$OneDriveKnownGuid" -Name '(default)' -Value $NewOneDriveLeaf
    Set-ItemProperty -Path "HKCU:\Software\Classes\WOW6432Node\CLSID\$OneDriveKnownGuid\Instance\InitPropertyBag" -Name 'TargetFolderPath' -Value $NewOneDrivePath

    Set-ItemProperty -Path 'HKCU:\Software\Microsoft\OneDrive\Accounts\Business1' -Name 'UserFolder' -Value $NewOneDrivePath

    (Get-Item -Path 'HKCU:\Software\Microsoft\OneDrive\Accounts\Business1\ScopeIdToMountPointPathCache' | Select-Object -ExpandProperty Property).ForEach({
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SyncRootManager\OneDrive!$UserSid!Business1|$_" -Name DisplayNameResource -Value $NewOneDriveLeaf
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\SyncRootManager\OneDrive!$UserSid!Business1|$_\UserSyncRoots" -Name $UserSid -Value $NewOneDrivePath

        Set-ItemProperty -Path 'HKCU:\Software\Microsoft\OneDrive\Accounts\Business1\ScopeIdToMountPointPathCache' -Name $_ -Value $NewOneDrivePath
    })

    (Get-ChildItem -Path 'HKCU:\Software\SyncEngines\Providers\OneDrive').ForEach({
        $MountPointValue = $_.GetValue('MountPoint')
        if ($MountPointValue -Match $OldOneDriveLeaf)
        {
            $NewMountPointValue = $MountPointValue.Replace($OldOneDriveLeaf, $NewOneDriveLeaf)
            [Microsoft.Win32.Registry]::SetValue($_.Name, 'MountPoint', $NewMountPointValue)
        }
    })

    $BaseTenantPath = 'HKCU:\Software\Microsoft\OneDrive\Accounts\Business1\Tenants'
    Rename-Item -Path "$BaseTenantPath\$OldOneDriveLeaf" -NewName $NewOneDriveLeaf
    Rename-ItemProperty -Path "$BaseTenantPath\$NewOneDriveLeaf" -Name $OldOneDrivePath -NewName $NewOneDrivePath

    # Check If Needed
    # Get-ItemProperty -Path "$BaseTenantPath\$NewOneDriveLeaf"
    # Set-ItemProperty -Path "$BaseTenantPath\$NewOneDriveLeaf" -Name $NewOneDrivePath -Value $NewOneDrivePath

    Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\$OneDriveKnownGuid" -Name '(default)' -Value $NewOneDriveLeaf

    (Get-Item -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders' | Select-Object -ExpandProperty Property).ForEach({
        $ShFItemProperty = Get-ItemPropertyValue -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders' -Name $_
        if ($ShFItemProperty -Match $OldOneDriveLeaf)
        {
            Set-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders' -Name $_ -Value $ShFItemProperty.Replace($OldOneDriveLeaf, $NewOneDriveLeaf)
        }
    })

    $HkcuUserShFoItem = 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders'
    (Get-Item -Path $HkcuUserShFoItem | Select-Object -ExpandProperty Property).ForEach({
        $ShFItemProperty = Get-ItemPropertyValue -Path $HkcuUserShFoItem -Name $_
        if ($ShFItemProperty -Match $OldOneDriveLeaf)
        {
            Set-ItemProperty -Path $HkcuUserShFoItem -Name $_ -Value $ShFItemProperty.Replace($OldOneDriveLeaf, $NewOneDriveLeaf)
        }
    })

    # TODO: Check if exists first
    (Get-ChildItem -Path "HKCU:\Software\Microsoft\Office\16.0\Common\ServicesManagerCache\Identities\${UserObjectId}_ADAL").ForEach({
        $RegEntry = $_
        $KeyName = $RegEntry.Name
        $RegEntry.GetValueNames().ForEach({
            $PropValue = $RegEntry.GetValue($_)
            if ($PropValue -Match $OldOneDriveLeaf)
            {
                [Microsoft.Win32.Registry]::SetValue($KeyName, $_,$PropValue.Replace($OldOneDriveLeaf, $NewOneDriveLeaf))
            }
        })
    })

    # TODO: Fix permissions issues
    (Get-ChildItem -Path 'HKLM:\SOFTWARE\Microsoft\Security Center\Provider\CBP').ForEach({
        $RegEntry = $_
        $KeyName = $RegEntry.Name
        $RegEntry.GetValueNames().ForEach({
            $PropValue = $RegEntry.GetValue($_)
            if ($PropValue -Match $OldOneDriveLeaf)
            {
                [Microsoft.Win32.Registry]::SetValue($KeyName, $_,$PropValue.Replace($OldOneDriveLeaf, $NewOneDriveLeaf))
            }
        })
    })

    Set-ItemProperty -Path 'HKCU:\Environment' -Name 'OneDrive' -Value $NewOneDrivePath
    Set-ItemProperty -Path 'HKCU:\Environment' -Name 'OneDriveCommercial' -Value $NewOneDrivePath

    # Update OneDrive settings file
    $SettingsIniPath = Join-Path -Path $Env:UserProfile -ChildPath "\AppData\Local\Microsoft\OneDrive\settings\Business1\$UserObjectId.ini"
    try {
        (Get-Content $SettingsIniPath -Encoding unicode) | ForEach-Object { $_ -Replace $OldOneDriveLeaf, $NewOneDriveLeaf } | Set-Content -Path $SettingsIniPath -Encoding unicode
        Write-Output "Updated settings file: $SettingsIniPath"
    } catch {
        Write-Error "Failed to update settings file: $_"
    }

    # Restart Explorer and OneDrive
    try {
        Stop-Process -Name 'explorer' -Force -ErrorAction Stop
        Start-Process -FilePath 'explorer' -ArgumentList 'C:\Program Files\Microsoft OneDrive\OneDrive.exe'
        Write-Output "Explorer and OneDrive processes restarted."
    } catch {
        Write-Error "Failed to restart Explorer and OneDrive: $_"
    }

    Write-Output "OneDrive renaming process completed."
}
